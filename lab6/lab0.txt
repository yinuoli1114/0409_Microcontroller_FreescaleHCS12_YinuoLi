







DECLARATIONS

clock pin 1;

CLR pin 8;

i2..i7 pin 2..7;

tens,mid,a,b,c,d,e,f,g pin 14..22 istype 'com';

IRQ node istype 'reg';

!IRQ_OUT pin 23 istype 'com';



EQUATIONS

IRQ.d = 1;

IRQ.clk = clock;

IRQ.ar = CLR;

IRQ_OUT = IRQ;



truth_table([i2,i7,i6,i5,i4,i3]->[!a,!b,!c,!d,!e,!f,!g,!tens,!mid])

"[ 0, 0, 0, 0, 0, 0]->[0,0,0,0,0,0,0,0,0];

[ 1, 0, 0, 0, 0, 0]->[1,1,1,1,1,1,0,1,0];

[ 1, 0, 0, 0, 1, 0]->[0,1,1,0,0,0,0,1,0];

[ 1, 0, 0, 1, 0, 0]->[1,1,0,1,1,0,1,1,0];

[ 1, 0, 0, 1, 1, 0]->[1,1,1,1,0,0,1,1,0];

[ 1, 0, 1, 0, 0, 0]->[0,1,1,0,0,1,1,1,0];

[ 0, 0, 0, 0, 0, 1]->[1,1,1,1,1,1,0,0,1];

[ 0, 0, 0, 0, 1, 1]->[0,1,1,0,0,0,0,0,1];

[ 0, 0, 0, 1, 0, 1]->[1,1,0,1,1,0,1,0,1];

[ 0, 0, 0, 1, 1, 1]->[1,1,1,1,0,0,1,0,1];

[ 0, 0, 1, 0, 0, 1]->[0,1,1,0,0,1,1,0,1];

[ 0, 0, 1, 0, 1, 1]->[1,0,1,1,0,1,1,0,1];

[ 0, 0, 1, 1, 0, 1]->[1,0,1,1,1,1,1,0,1];

[ 0, 0, 1, 1, 1, 1]->[1,1,1,0,0,0,0,0,1];

[ 0, 1, 0, 0, 0, 1]->[1,1,1,1,1,1,1,0,1];

[ 0, 1, 0, 0, 1, 1]->[1,1,1,1,0,1,1,0,1];

[ 0, 0, 0, 0, 0, 0]->[1,1,1,1,1,1,0,0,0];

[ 0, 0, 0, 0, 1, 0]->[0,1,1,0,0,0,0,0,0];

[ 0, 0, 0, 1, 0, 0]->[1,1,0,1,1,0,1,0,0];

[ 0, 0, 0, 1, 1, 0]->[1,1,1,1,0,0,1,0,0];

[ 0, 0, 1, 0, 0, 0]->[0,1,1,0,0,1,1,0,0];

[ 0, 0, 1, 0, 1, 0]->[1,0,1,1,0,1,1,0,0];

[ 0, 0, 1, 1, 0, 0]->[1,0,1,1,1,1,1,0,0];

[ 0, 0, 1, 1, 1, 0]->[1,1,1,0,0,0,0,0,0];

[ 0, 1, 0, 0, 0, 0]->[1,1,1,1,1,1,1,0,0];

[ 0, 1, 0, 0, 1, 0]->[1,1,1,1,0,1,1,0,0];





END











;***********************************************************************

; ECE 362 - Experiment 6 - Fall 2013

;***********************************************************************

;

; Completed by: < your name > Zisheng Liao

;               < your class number > 1734-l

;               < your lab division > unknown

;

;

; Academic Honesty Statement:  In signing this statement, I hereby certify

; that I am the individual who created this HC(S)12 source file and that I

; have not copied the work of any other student (past or present) while

; completing it. I understand that if I fail to honor this agreement, I will

; receive a grade ofZERO and be subject to possible disciplinary action.

;

;

; Signature: __________BADASS LIAO___________________________   Date: ___1/10/2013_________

;

;      

;***********************************************************************

;

; The objective of this experiment is to implement a Big More-Than-Ten

; 14-secod play clock on the 9S12C32 development kit.  A function

; generator will be used to provide a 10 Hz periodic interrupt. A

; GAL22V10 will be used to provide the requisite interfacing logic,

; which includes an interrupt device flag and a BCD-to-display-code

; decoder for driving a pair of common-anode 7-segment LEDs (see

; lab description document for details). Note that this application is

; intended to run in a "turn-key" fashion.

;

; The following docking board resources will be used:

;

; - left pushbutton (PAD7): shot clock reset

; - right pushbutton (PAD6): shot clock start/stop

; - left LED (PT1): shot clock run/stop state

; - right LED (PT0): shot clock expired (00) state

;

; CAUTION: Be sure to use the SYNC output of the function generator.

;

;========================================================================

;

; MC68HC9S12C32 REGISTER MAP



INITRM EQU $0010 ; INITRM - INTERNAL RAM POSITION REGISTER

INITRG EQU $0011 ; INITRG - INTERNAL REGISTER POSITION REGISTER



; ==== CRG - Clock and Reset Generator



SYNR EQU $0034 ; CRG synthesizer register

REFDV EQU $0035 ; CRG reference divider register

CRGFLG EQU $0037 ; CRG flags register

CRGINT EQU $0038

CLKSEL EQU $0039 ; CRG clock select register

PLLCTL EQU $003A ; CRG PLL control register

RTICTL EQU $003B

COPCTL EQU $003C



; ==== PORT M



PTM EQU $0250 ; Port M data register (bit 3 will be used to clear device flag)

DDRM EQU $0252 ; Port M data direction register



; ==== Port AD - Digital Input (Pushbuttons)



PTAD    EQU     $0270   ; Port AD data register

DDRAD   EQU     $0272   ; Port AD data direction register

ATDDIEN EQU $008D ; Port AD digital input enable

; (programs Port AD bit positions as digital inputs)





; ==== Port T - docking module LEDs and external PLD interface



PTT EQU $0240 ; Port T data register

DDRT EQU $0242 ; Port T data direction register



; ==== IRQ control register



IRQCR EQU $001E ; (will use default state out of reset)



; ==== SCI Register Definitions



SCIBDH EQU $00C8 ; SCI0BDH - SCI BAUD RATE CONTROL REGISTER

SCIBDL EQU $00C9 ; SCI0BDL - SCI BAUD RATE CONTROL REGISTER

SCICR1 EQU $00CA ; SCI0CR1 - SCI CONTROL REGISTER

SCICR2 EQU $00CB ; SCI0CR2 - SCI CONTROL REGISTER

SCISR1 EQU $00CC ; SCI0SR1 - SCI STATUS REGISTER

SCISR2 EQU $00CD ; SCI0SR2 - SCI STATUS REGISTER

SCIDRH EQU $00CE ; SCI0DRH - SCI DATA REGISTER

SCIDRL EQU $00CF ; SCI0DRL - SCI DATA REGISTER



;***********************************************************************

;

; ASCII character definitions

;



CR equ $0d ; RETURN



; ======================================================================

;

;  Variable declarations (SRAM)

;  Others may be added if deemed necessary





tenths equ $3800 ; one-tenth second flag

leftpb equ $3801 ; left pushbutton flag

rghtpb equ $3802 ; right pushbutton flag

runstp equ $3803 ; run/stop flag

right equ $3804

left equ $3805





supertimer equ $3806



rmask equ $40

lmask equ $80



bmask equ $01 ;set flag

cmask equ $03

linger equ $02

val equ $fc





;***********************************************************************

;  BOOT-UP ENTRY POINT

;***********************************************************************



org $8000

startup sei ; Disable interrupts

movb #$00,INITRG ; set registers to $0000

movb #$39,INITRM ; map RAM ($3800 - $3FFF)

lds #$3FCE ; initialize stack pointer



;

; Set the PLL speed (bus clock = 24 MHz)

;



bclr CLKSEL,$80 ; disengage PLL from system

bset PLLCTL,$40 ; turn on PLL

movb #$2,SYNR ; set PLL multiplier

movb #$0,REFDV ; set PLL divider

nop

nop

plp brclr CRGFLG,$08,plp ; while (!(crg.crgflg.bit.lock==1))

bset CLKSEL,$80 ; engage PLL



;

; Disable watchdog timer (COPCTL register)

;

movb #$40,COPCTL ; COP off; RTI and COP stopped in BDM-mode



;

; Initialize asynchronous serial port (SCI) for 9600 baud, no interrupts

; Note - for debugging use only

;

movb #$00,SCIBDH ; set baud rate to 9600

movb #$9C,SCIBDL ; 24,000,000 / 16 / 156 = 9600 (approx)

movb #$00,SCICR1 ; $9C = 156

movb #$0C,SCICR2 ; initialize SCI for program-driven operation





;***********************************************************************

;  START OF CODE FOR EXPERIMENT

;***********************************************************************

;

;  Flag and variable initialization (others may be added)

;





clr tenths

clr leftpb

clr rghtpb

clr runstp





;

;  Initialize Port AD for use as a digital input port (for pushbuttons)

;

clr DDRAD ; program port AD for input mode

movb #$C0,ATDDIEN ; program PTAD7 and PTAD6 pins as digital inputs



;

;  Initialize Port M to provide asynchronous reset to external device flag on bit 3

;

bset DDRM,$08 ; configure pin 3 of Port M (PM3) as output signal

bset PTM,$08 ; send active high clear pulse to external device flag

bclr PTM,$08 ; return asynchronous clear signal to low state



;

;  < add any additional initialization code here >

;

   bset DDRT, $ff



   movb #$40, right

   movb #$80, left

   movw #$0140,supertimer

   movb #$44,PTT

  



cli ; enable IRQ interrupts - last step before starting main loop

;

;  Start of main program-driven polling loop

;

  ; Forgot to wake up Green Day!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

main

;  If the "tenth second" flag is set, then

;    - clear the "tenth second" flag

;    - If the "run/stop" flag is set, then

;      + decrement the play clock value

;      + update the 7-segment display

;        o if the time remaining is 10 seconds or more,

;          display the tens and ones digits

;        o if the time remaining is less than 10 seconds

;          but more than 1.0 second, blank the tens digit

;          and only display the ones digit

;        o if the time remaining is less than 1.0 second,

;          turn on the middle decimal point and display

;          the tenths digit instead of the ones digit

;    - Endif

;  Endif





brset tenths, bmask, bigif

bra hahaha



bigif

        movb #0,tenths

        brset runstp,bmask,smallif ; check if run/stop flag is set  

        bra hahaha

       

smallif

        clr PTT

        ldd supertimer

        psha

        tfr b,a

        pulb

        adda #$99

        daa

        adcb #0

        psha

        tfr b,a

        pulb

        adca #$99

        daa

        std supertimer

       

        cmpa #$01

        lblo lessthanten

        ; larger or equal to ten

 

        andb #$f0 ;mask out the lower nibble

        addb #$06

        stab PTT

       

        bra hahaha

                

lessthanten

        cmpb #$10

        lblo lessthanone

        andb #$f0

        addb #$02

        stab PTT

       

     

       

        bra hahaha



lessthanone

        lslb

        lslb

        lslb

        lslb

        andb #$f0

        addb #$0A

        stab PTT



hahaha

       

;  If the left pushbutton ("reset play clock") flag is set, then:

;    - clear the left pushbutton flag

;    - clear the "run/stop" flag

;    - turn off both the "run/stop" and "time expired" LEDs

;    - reset the display to "14"

;  Endif

      brset leftpb,bmask,hehehe

      bra heiheihei

hehehe

      movb #0,leftpb

      movb #0,runstp

      bclr PTT,#$03

      movb #$44,PTT 

      movw #$0140,supertimer

          

     

;  If the right pushbutton ("start/stop") flag is set, then

;    - clear the right pushbutton flag

;    - toggle the "run/stop" flag

;    - toggle the "run/stop" LED

;  Endif

heiheihei

       brset rghtpb,bmask,meiyou

       bra zheli



meiyou

      movb #0,rghtpb

      ldaa #$01

      eora runstp

      staa runstp

      ldaa #$02

      eora PTT

      staa PTT

     

     

;  If the play clock has reached ".0", then:

;    - clear the "run/stop" flag

;    - turn on the "time expired" LED

;    - turn off the "run/stop" LED

;  Endif

zheli

     ldd supertimer

     cpd #0

     beq nali

     bra jiba

    

nali movb #0,runstp

     bset PTT,#$01

     bclr PTT,linger

    

jiba





      jmp main ;  main is a while( ) loop with no terminating condition





;***********************************************************************

;

; IRQ interrupt service routine

;

;  External oscillator produces 10 Hz IRQ interrupt rate

;

;  Decrements play clock value (stored as packed 4-digit BCD number)

;

;  Samples state of pushbuttons (PAD7 = left, PAD6 = right)

;

;  If change in state from "high" to "low" is detected, set pushbutton flag

;     leftpb (for PAD7 H -> L), rghtpb (for PAD6 H -> L)

;     (pushbuttons are momentary contact closures to ground)

;



irq_isr

   

     bset PTM,$08

     bclr PTM,$08

  

    movb #$01, tenths

    brclr PTAD, lmask, setleft

    movb #$80,left

   

    brclr PTAD, rmask, setright

    movb #$40,right

    bra endofirq

   

setleft

    brclr left,lmask,no

    movb #$01,leftpb

    movb #0, left

no    bra endofirq

setright

    brclr right,rmask,no1

    movb #$01,rghtpb

    movb #0, right

no1    bra endofirq

   

; < place your code for the IRQ interrupt service routine here >



; < be sure to clear external device flag by asserting bit 3 of Port M - see above >

    

endofirq



   



        rti





;***********************************************************************

;

; Add any additional subroutines needed here

;

;  < place additional routines here >















;***********************************************************************

; Character I/O Library Routines for 9S12C32

;

; (these maay prove useful for testing and debugging but are otherwise

; not used for this application)

;***********************************************************************



rxdrf    equ   $20    ; receive buffer full mask pattern

txdre    equ   $80    ; transmit buffer empty mask pattern



;***********************************************************************

; Name:         inchar

; Description:  inputs ASCII character from SCI serial port

;                  and returns it in the A register

; Returns:      ASCII character in A register

; Modifies:     A register

;***********************************************************************



inchar  brclr  SCISR1,rxdrf,inchar

        ldaa   SCIDRL ; return ASCII character in A register

        rts



;***********************************************************************

; Name:         outchar

; Description:  outputs ASCII character passed in the A register

;                  to the SCI serial port

;***********************************************************************



outchar brclr  SCISR1,txdre,outchar

        staa   SCIDRL ; output ASCII character to SCI

        rts



;***********************************************************************

;

; Define 'where you want to go today' (reset and interrupt vectors)

;

; If get a "bad" interrupt, just return from it



BadInt rti



;

; ------------------ VECTOR TABLE --------------------

;



org $FF8A

fdb BadInt ;$FF8A: VREG LVI

fdb BadInt ;$FF8C: PWM emergency shutdown

fdb BadInt ;$FF8E: PortP

fdb BadInt ;$FF90: Reserved

fdb BadInt ;$FF92: Reserved

fdb BadInt ;$FF94: Reserved

fdb BadInt ;$FF96: Reserved

fdb BadInt ;$FF98: Reserved

fdb BadInt ;$FF9A: Reserved

fdb BadInt ;$FF9C: Reserved

fdb BadInt ;$FF9E: Reserved

fdb BadInt ;$FFA0: Reserved

fdb BadInt ;$FFA2: Reserved

fdb BadInt ;$FFA4: Reserved

fdb BadInt ;$FFA6: Reserved

fdb BadInt ;$FFA8: Reserved

fdb BadInt ;$FFAA: Reserved

fdb BadInt ;$FFAC: Reserved

fdb BadInt ;$FFAE: Reserved

fdb BadInt ;$FFB0: CAN transmit

fdb BadInt ;$FFB2: CAN receive

fdb BadInt ;$FFB4: CAN errors

fdb BadInt ;$FFB6: CAN wake-up

fdb BadInt ;$FFB8: FLASH

fdb BadInt ;$FFBA: Reserved

fdb BadInt ;$FFBC: Reserved

fdb BadInt ;$FFBE: Reserved

fdb BadInt ;$FFC0: Reserved

fdb BadInt ;$FFC2: Reserved

fdb BadInt ;$FFC4: CRG self-clock-mode

fdb BadInt ;$FFC6: CRG PLL Lock

fdb BadInt ;$FFC8: Reserved

fdb BadInt ;$FFCA: Reserved

fdb BadInt ;$FFCC: Reserved

fdb BadInt ;$FFCE: PORTJ

fdb BadInt ;$FFD0: Reserved

fdb BadInt ;$FFD2: ATD

fdb BadInt ;$FFD4: Reserved

fdb BadInt ;$FFD6: SCI Serial System

fdb BadInt ;$FFD8: SPI Serial Transfer Complete

fdb BadInt ;$FFDA: Pulse Accumulator Input Edge

fdb BadInt ;$FFDC: Pulse Accumulator Overflow

fdb BadInt ;$FFDE: Timer Overflow

fdb BadInt ;$FFE0: Standard Timer Channel 7

fdb BadInt ;$FFE2: Standard Timer Channel 6

fdb BadInt ;$FFE4: Standard Timer Channel 5

fdb BadInt ;$FFE6: Standard Timer Channel 4

fdb BadInt ;$FFE8: Standard Timer Channel 3

fdb BadInt ;$FFEA: Standard Timer Channel 2

fdb BadInt ;$FFEC: Standard Timer Channel 1

fdb BadInt ;$FFEE: Standard Timer Channel 0

fdb BadInt ;$FFF0: Real Time Interrupt (RTI)

fdb irq_isr ;$FFF2: IRQ (External Pin or Parallel I/O) (IRQ)

fdb BadInt ;$FFF4: XIRQ (Pseudo Non-Maskable Interrupt) (XIRQ)

fdb BadInt ;$FFF6: Software Interrupt (SWI)

fdb BadInt ;$FFF8: Illegal Opcode Trap ()

fdb startup ;$FFFA: COP Failure (Reset) ()

fdb BadInt ;$FFFC: Clock Monitor Fail (Reset) ()

fdb startup ;$FFFE: /RESET

end



The most BADASS SHIT.txt

1 of 2
Displaying The most BADASS SHIT.txt.
Added tyh9000@gmail.com. Press backspace to remove.